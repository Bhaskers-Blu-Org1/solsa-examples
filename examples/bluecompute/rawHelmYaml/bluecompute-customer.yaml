# Source: customer/templates/customer.yaml
apiVersion: v1
kind: Service
metadata:
  name: "bluecompute-customer"
  labels:    
    app: "customer"
    implementation: "microprofile"
    tier: "backend"
    version: "v1"
    app.kubernetes.io/name: bluecompute-customer
    helm.sh/chart: customer-0.1.0
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: bluecompute
    heritage: "Tiller"
    release: "bluecompute"
    chart: customer-0.1.0
spec:
  type: NodePort
  ports:
  - name: http
    port: 9080
  - name: https
    port: 9443
  selector:    
    app: "customer"
    implementation: "microprofile"
    tier: "backend"
    version: "v1"
    app.kubernetes.io/name: bluecompute-customer
    helm.sh/chart: customer-0.1.0
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: bluecompute
    heritage: "Tiller"
    release: "bluecompute"
    chart: customer-0.1.0
---
# Source: customer/templates/customer.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "bluecompute-customer"
  labels:    
    app: "customer"
    implementation: "microprofile"
    tier: "backend"
    version: "v1"
    app.kubernetes.io/name: bluecompute-customer
    helm.sh/chart: customer-0.1.0
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: bluecompute
    heritage: "Tiller"
    release: "bluecompute"
    chart: customer-0.1.0
spec:
  replicas: 1
  template:
    metadata:
      labels:        
        app: "customer"
        implementation: "microprofile"
        tier: "backend"
        version: "v1"
        app.kubernetes.io/name: bluecompute-customer
        helm.sh/chart: customer-0.1.0
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/instance: bluecompute
        heritage: "Tiller"
        release: "bluecompute"
        chart: customer-0.1.0

    spec:
      containers:
      # Liberty Server Container
      - name: "customer"
        image: "customer:latest"
        # image: customer
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /health
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 20
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 6
        env:
          
          - name: jwksUri
            value: "https://auth-auth:9443/oidc/endpoint/OP/jwk"
          - name: jwksIssuer
            value: "https://auth-auth:9443/oidc/endpoint/OP"
          - name: administratorRealm
            value: "user:https://auth-auth:9443/oidc/endpoint/OP/user"
          - name: auth_health
            value: "https://auth-auth:9443/health"
        
          - name: host
            value: "customer-svc-couchdb"
          - name: PORT
            value: "9080"
          - name: RELEASE_NAME
            value: "bluecompute"
          - name: jwtid
            value: "myMpJwt"
          - name: zipkinHost
            value: "bluecompute-zipkin"
          - name: zipkinPort
            value: "9411"
        resources:
          requests:
            memory: "64Mi"
        volumeMounts:
        - name: keystorevol
          mountPath: "/etc/keystorevol"
          readOnly: true
      volumes:
      - name: keystorevol
        secret:
          secretName: keystoresecret
---
# Source: customer/templates/load_data.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "bluecompute-populate"
spec:
  template:
    # Used with istio
    # metadata:
    #   annotations:
    #     sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: populate
        image: populate
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "python3 /tmp/populate.py  customer-svc-couchdb 5984"]
      restartPolicy: Never
